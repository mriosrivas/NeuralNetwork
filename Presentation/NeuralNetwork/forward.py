import numpy as np
from activations import *


def linear_forward(A, W, b, k=16, precision='int32'):
    """
    Function that implements the linear part of a layer's forward propagation. Calculation of Z=W*A+b.

    :param A: activations from previous layer (or input data): (size of previous layer, number of examples)
    :param W: weights matrix: numpy array of shape (size of current layer, size of previous layer)
    :param b: bias vector, numpy array of shape (size of the current layer, 1)
    :param k: number of times a left shift is performed to the lsb to create a matrix of weights
    :param precision: integer PRECISION of implementation
    :return: Z -- the input of the activation function, also called pre-activation parameter
            cache -- a python tuple containing "A", "W" and "b" ; stored for computing the backward pass efficiently
    """

    Z = ((np.dot(W, A)).astype(precision) >> k) + b

    assert (Z.shape == (W.shape[0], A.shape[1]))
    cache = (A, W, b)

    return Z, cache


def linear_activation_forward(A_prev, W, b, activation, k=16, precision='int32', **kwargs):
    """
    Function that implements the forward propagation for the LINEAR->ACTIVATION layer.

    :param A_prev: activations from previous layer (or input data): (size of previous layer, number of examples)
    :param W: weights matrix: numpy array of shape (size of current layer, size of previous layer)
    :param b: bias vector, numpy array of shape (size of the current layer, 1)
    :param activation: the activation to be used in this layer, stored as a text string: "sigmoid" or "relu"
    :param k: number of times a left shift is performed to the lsb to create a matrix of weights
    :param precision: integer PRECISION of implementation
    :param kwargs: "table" sigmoid activation table generated by function sigmoid_table
                    "sigmoid_decimal_bits" number of bits used for decimal values
                    "EXTRA_BITS" bits used to increment range of input values
    :return: A -- the output of the activation function, also called the post-activation value
            cache -- a python tuple containing "linear_cache" and "activation_cache";
            stored for computing the backward pass efficiently
    """

    if activation == "sigmoid":
        # Inputs: "A_prev, W, b". Outputs: "A, activation_cache".
        Z, linear_cache = linear_forward(A_prev, W, b, k, precision)
        A, activation_cache = sigmoid(Z, table=kwargs['table'], extra_bits=kwargs['extra_bits'],
                                      sigmoid_decimal_bits=kwargs['sigmoid_decimal_bits'])

    elif activation == "relu":
        # Inputs: "A_prev, W, b". Outputs: "A, activation_cache".
        Z, linear_cache = linear_forward(A_prev, W, b, k, precision)
        A, activation_cache = relu(Z)

    assert (A.shape == (W.shape[0], A_prev.shape[1]))
    cache = (linear_cache, activation_cache)

    return A.astype(precision), cache
